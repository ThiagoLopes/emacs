#+TITLE: Quake Emacs Configuration File
#+AUTHOR: thiagolopes@protonmail.com
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes


* Quake
** Init

   #+BEGIN_SRC emacs-lisp

   ;;; -*- lexical-binding: t -*-

   #+END_SRC

   I'd like to keep a few settings private,
   so we load a =private.el= if it exists after the init-file has
   loaded.

   #+BEGIN_SRC emacs-lisp

(add-hook 'after-init-hook
  (lambda ()
    (let ((private-file (concat user-emacs-directory "private.el")))
      (when (file-exists-p private-file)
      (load-file private-file)))))

   #+END_SRC

   Define =mesk/build= function, which extracts the code blocks
   from the current file into a source-specific file
   (in this case init.el).

   #+BEGIN_SRC emacs-lisp

;; todo: this function is dangerous, research a better way.
(defun quake/build ()
  "Tangle code-blocks in init.el file and compile it."
  (interactive)
  (let ((prog-mode-hook nil))
    (org-babel-tangle)
    (byte-compile-file (concat user-emacs-directory "init.el"))))

   #+END_SRC

   Calculates emacs load time and show this information
   on =*Messages*= buffer.
   
*** Benchmark

   #+BEGIN_SRC emacs-lisp

;; Use a hook so the message doesn't get clobbered by other messages.
(add-hook 'emacs-startup-hook
  (lambda ()
    (message "Emacs ready in %s with %d garbage collections."
      (format "%.2f seconds"
        (float-time
          (time-subtract after-init-time before-init-time)))
      gcs-done)))

   #+END_SRC
*** Load custom

    Load custom config

    #+BEGIN_SRC emacs-lisp
    
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    
    #+END_SRC

** Garbage Colletor

   A big contributor to startup times is garbage collection. We up the
   gc threshold to temporarily prevent it from running, then reset it
   later added in hook `emacs-startup-hook`. Not resetting it will
   cause stuttering/freezes.

   #+BEGIN_SRC emacs-lisp

(let ((normal-gc-cons-threshold (* 16 1024 1026)))
  (setq gc-cons-threshold most-positive-fixnum)
  (add-hook 'emacs-startup-hook
            (lambda () (setq gc-cons-threshold normal-gc-cons-threshold))))

   #+END_SRC

** Debug

(setq debug-on-error nil)
** Check emacs version

   Check min emacs version

   #+BEGIN_SRC emacs-lisp

(let ((minver "24.4"))
  (when (version< emacs-version minver)
    (error "Your Emacs is too old -- this config requires v%s or higher" minver)))
(when (version< emacs-version "25.1")
  (message "Your Emacs is old, and some functionality in this config will be disabled. Please upgrade if possible."))
;; https://www.reddit.com/r/emacs/comments/cdei4p/failed_to_download_gnu_archive_bad_request/
(when (version= emacs-version "26.1")
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))
   
   #+END_SRC

** Defines

   Define Quake variables.

   #+BEGIN_SRC emacs-lisp

(defvar quake-lisp-packages-dir
  (expand-file-name 
    (format "elpa-%s.%s" emacs-major-version emacs-minor-version)
  user-emacs-directory))

(defvar quake-autosave-dir
  (concat user-emacs-directory "autosave/")
  "Quake auto-save-list directory.")

(defvar quake-backup-dir
  (concat user-emacs-directory "backup/")
  "Quake backup directory.")

(defvar quake-cache-dir
  (concat user-emacs-directory "cache/")
  "Quake storage area(cache) directory.")

(defvar quake-font "Hack 10"
  "Quake default font.")

;; default aliases
(defalias 'yes-or-no-p 'y-or-n-p)

   #+END_SRC
** Package
*** Packages init
    #+BEGIN_SRC emacs-lisp

(require 'cl)
(require 'package)

    #+END_SRC

    Install into separate package dirs for each Emacs version, to
    prevent bytecode incompatibility

    #+BEGIN_SRC emacs-lisp

(setq package-user-dir quake-lisp-packages-dir)
    
    #+END_SRC

    Standard package repositories

    #+BEGIN_SRC emacs-lisp

(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  ;; Official MELPA Mirror, in case necessary.
  ;;(add-to-list 'package-archives (cons "melpa-mirror" (concat proto "://www.mirrorservice.org/sites/melpa.org/packages/")) t)
  (if (< emacs-major-version 24)
      ;; For important compatibility libraries like cl-lib
      (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))
    (unless no-ssl
      ;; Force SSL for GNU ELPA
      (setcdr (assoc "gnu" package-archives) "https://elpa.gnu.org/packages/"))))
    
    #+END_SRC

    Create functions to install packages

    #+BEGIN_SRC emacs-lisp

(defun require-package (package &optional min-version no-refresh)
  "Install given PACKAGE, optionally requiring MIN-VERSION.
If NO-REFRESH is non-nil, the available package lists will not be
re-downloaded in order to locate PACKAGE."
  (or (package-installed-p package min-version)
      (let* ((known (cdr (assoc package package-archive-contents)))
             (versions (mapcar #'package-desc-version known)))
        (if (cl-find-if (lambda (v) (version-list-<= min-version v)) versions)
            (package-install package)
          (if no-refresh
              (error "No version of %s >= %S is available" package min-version)
            (package-refresh-contents)
            (require-package package min-version t))))))

(defun maybe-require-package (package &optional min-version no-refresh)
  "Try to install PACKAGE, and return non-nil if successful.
In the event of failure, return nil and print a warning message.
Optionally require MIN-VERSION.  If NO-REFRESH is non-nil, the
available package lists will not be re-downloaded in order to
locate PACKAGE."
  (condition-case err
      (require-package package min-version no-refresh)
    (error
     (message "Couldn't install optional package `%s': %S" package err)
     nil)))
    
    #+END_SRC

    Install list packages

    #+BEGIN_SRC emacs-lisp

(defun quake/packages-install (packages-list)
  "Install packages contained in PACKAGES-LIST list.
If isn't already installed."
  ;; Clean packages-list
  (setq packages (remove-if 'package-installed-p packages-list))

  ;; Install uninstalled packages
  (when packages
    ;; package-refresh, is this necessary? (yes!)
    (package-refresh-contents)
    (dolist (package packages)
      (require-package package))))
    
    #+END_SRC

*** Package configs
    
    Fire up packages
    #+BEGIN_SRC emacs-lisp

(setq package-enable-at-startup nil)
(package-initialize)

    #+END_SRC

    Configure fullframe

    #+BEGIN_SRC emacs-lisp

(require-package 'fullframe)
(fullframe list-packages quit-window)
    
    #+END_SRC
** Configs
*** Basic configs
    #+BEGIN_SRC emacs-lisp

(setq-default
 blink-cursor-interval               0.4
 bookmark-default-file              (expand-file-name ".bookmarks.el" user-emacs-directory)
 buffers-menu-max-size               30
 case-fold-search                    t
 column-number-mode                  t
 delete-selection-mode               t
 ediff-split-window-function        'split-window-horizontally
 ediff-window-setup-function        'ediff-setup-windows-plain
 indent-tabs-mode                    nil
 tab-width                           4 ;; HACK
 make-backup-files                   nil
 ;; auto-save-default                nil ;; HACK
 ;; create-lockfiles                 nil ;; HACK
 mouse-yank-at-point                 t
 save-interprogram-paste-before-kill t
 confirm-nonexistent-file-or-buffer  t ;; HACK
 visible-bell                        nil ;; HACK
 require-final-newline               t ;; HACK
 ring-bell-function                  'ignore ;; HACK
 select-enable-clipboard             t ;; HACK
 scroll-preserve-screen-position    'always
 set-mark-command-repeat-pop         t
 tooltip-delay                       1.5
 truncate-lines                      nil
 truncate-partial-width-windows      nil
 sentence-end-double-space           nil ; Sentences should end in one space, come on! HACK
 help-window-select                  t ; select help window so it's easy to quit it with 'q' HACK
 confirm-kill-emacs                 'y-or-n-p ; y and n instead of yes and no HACK
 initial-major-mode                 'org-mode ; HACK
 make-pointer-invisible              t ; HACK
 )

    #+END_SRC
*** UTF-8
    #+BEGIN_SRC emacs-lisp

(set-charset-priority 'unicode)
(setq locale-coding-system   'utf-8)   ; pretty
(set-terminal-coding-system  'utf-8)   ; pretty
(set-keyboard-coding-system  'utf-8)   ; pretty
(set-selection-coding-system 'utf-8)   ; please
(prefer-coding-system        'utf-8)   ; with sugar on top
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))
    
    #+END_SRC
*** eletric-pair
    #+BEGIN_SRC emacs-lisp

(when (fboundp 'electric-pair-mode)
  (add-hook 'after-init-hook 'electric-pair-mode))
(when (eval-when-compile (version< "24.4" emacs-version))
  (add-hook 'after-init-hook 'electric-indent-mode))
    
    #+END_SRC
*** autorevert
    #+BEGIN_SRC emacs-lisp

(setq global-auto-revert-non-file-buffers t
      auto-revert-verbose nil)
(after-load 'autorevert
  (diminish 'auto-revert-mode))
    
    #+END_SRC
** Base packages
*** Bases
    You can add packages in this list (mesk-packages-list)
    and they will be installed. If you remove some package
    do not forget to remove the `(requires <removed-package>)` in
    the ** Requires section.

    For convention after a package is added you have to configure
    him in the ** Requires section at the format *** <Package Name>.

    The configuration assumes that the packages listed below are
    installed.

    #+BEGIN_SRC emacs-lisp

(customize-set-variable
  quake-packages-list
  '(
     org
     eshell
     eww
     projectile
     company
     flycheck
     editorconfig
     magit
     which-key
     buffer-move
     undo-tree
     diminish
     command-log-mode
     scratch
     unfill
     list-unicode-display
     mode-line-bell
     goto-line-preview
     rainbow-delimiters
     ))


(quake/packages-install quake-packages-list)

    #+END_SRC
*** Packages with config
**** exec-path
     Set up exec-path to help Emacs find programs

     #+BEGIN_SRC emacs-lisp

(require-package 'exec-path-from-shell)

(after-load 'exec-path-from-shell
  (dolist (var 
  '("SSH_AUTH_SOCK" "SSH_AGENT_PID" "GPG_AGENT_INFO" "LANG" "LC_CTYPE", "GO_PATH"))
    (add-to-list 'exec-path-from-shell-variables var)))
     
     #+END_SRC
**** vlf
    #+BEGIN_SRC emacs-lisp

(require-package 'vlf)

(defun ffap-vlf ()
  "Find file at point with VLF."
  (interactive)
  (let ((file (ffap-file-at-point)))
    (unless (file-exists-p file)
      (error "File does not exist: %s" file))
    (vlf file)))
    
    #+END_SRC
**** beacon
     #+BEGIN_SRC emacs-lisp

(when (require-package 'beacon)
(setq-default beacon-lighter "")
(setq-default beacon-size 20))
     
     #+END_SRC
**** subword
     #+BEGIN_SRC emacs-lisp

(after-load 'subword
  (diminish 'subword-mode))
     
     #+END_SRC
**** display-line-numbers-mode
     #+BEGIN_SRC emacs-lisp

(when (fboundp 'display-line-numbers-mode)
  (setq display-line-numbers-width 3)
    (defun quake/with-display-line-numbers (f &rest args)
      (let ((display-line-numbers t))
        (apply f args)))
    (advice-add 'goto-line-preview :around #quake/with-display-line-numbers))
     
     #+END_SRC
** Functions - Utils
   Handier way to add modes to auto-mode-alist

   #+BEGIN_SRC emacs-lisp
   
(defun quake/add-auto-mode (mode &rest patterns)
  "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
  (dolist (pattern patterns)
    (add-to-list 'auto-mode-alist (cons pattern mode))))

   #+END_SRC

   String utilities missing from core emacs

   #+BEGIN_SRC emacs-lisp
   
(defun quake/string-all-matches (regex str &optional group)
  "Find all matches for `REGEX' within `STR', returning the full match string or group `GROUP'."
  (let ((result nil)
        (pos 0)
        (group (or group 0)))
    (while (string-match regex str pos)
      (push (match-string group str) result)
      (setq pos (match-end group)))
    result))

   #+END_SRC

   Delete the current file

   #+BEGIN_SRC emacs-lisp
   
(defun quake/delete-this-file ()
  "Delete the current file, and kill the buffer."
  (interactive)
  (unless (buffer-file-name)
    (error "No file is currently being edited"))
  (when (yes-or-no-p (format "Really delete '%s'?"
                             (file-name-nondirectory buffer-file-name)))
    (delete-file (buffer-file-name))
    (kill-this-buffer)))

   #+END_SRC

   Rename the current file
   #+BEGIN_SRC emacs-lisp
   
(defun quake/rename-this-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "New name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (unless filename
      (error "Buffer '%s' is not visiting a file!" name))
    (progn
      (when (file-exists-p filename)
        (rename-file filename new-name 1))
      (set-visited-file-name new-name)
      (rename-buffer new-name))))

   #+END_SRC

   Browse current HTML file
   #+BEGIN_SRC emacs-lisp
   
(defun quake/browse-current-file ()
  "Open the current file as a URL using `browse-url'."
  (interactive)
  (let ((file-name (buffer-file-name)))
    (if (and (fboundp 'tramp-tramp-file-p)
             (tramp-tramp-file-p file-name))
        (error "Cannot open tramp file")
      (browse-url (concat "file://" file-name)))))

   #+END_SRC

   Delete the current file
   #+BEGIN_SRC emacs-lisp
   
(defun quake/delete-this-file ()
  "Delete the current file, and kill the buffer."
  (interactive)
  (unless (buffer-file-name)
    (error "No file is currently being edited"))
  (when (yes-or-no-p (format "Really delete '%s'?"
                             (file-name-nondirectory buffer-file-name)))
    (delete-file (buffer-file-name))
    (kill-this-buffer)))

   #+END_SRC

   Move to beginning of line or indentation
   #+BEGIN_SRC emacs-lisp

(defun quake/back-to-indentation-or-beginning ()
  (interactive)
  "Move to beginning of line or indentation"
  (if (= (point) (progn (back-to-indentation) (point)))
      (beginning-of-line)))

   #+END_SRC

   Kill other buffers
   #+BEGIN_SRC emacs-lisp
   
(defun quake/kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

   #+END_SRC

   Indente file
   #+BEGIN_SRC emacs-lisp
   
(defun quake/indent-file (file)
  "prompt for a file and indent it according to its major mode"
  (interactive "fWhich file do you want to indent: ")
  (find-file file)
  ;; uncomment the next line to force the buffer into a c-mode
  ;; (c-mode)
  (indent-region (point-min) (point-max)))

   #+END_SRC

   Kill region
   #+BEGIN_SRC emacs-lisp
   
(defadvice quake/kill-region (before slick-cut activate compile)
  "When called interactively with no active region, kill a single line instead."
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (list (line-beginning-position)
           (line-beginning-position 2)))))

   #+END_SRC

   Auto export to html
   #+BEGIN_SRC emacs-lisp
   
(defun quake/toggle-org-html-export-on-save ()
  "Auto export to html"
  (interactive)
  (if (memq 'org-html-export-to-html after-save-hook)
      (progn
        (remove-hook 'after-save-hook 'org-html-export-to-html t)
        (message "Disabled org html export on save for current buffer..."))
    (add-hook 'after-save-hook 'org-html-export-to-html nil t)
    (message "Enabled org html export on save for current buffer...")))

   #+END_SRC

   Insert an empty line after the current line. Position the cursor at its beginning, according to the current mode.
   #+BEGIN_SRC emacs-lisp
   
(defun quake/smart-open-line ()
  "Insert an empty line after the current line. Position the cursor at its beginning, according to the current mode."
  (interactive)
  (move-end-of-line nil)
  (newline-and-indent))

   #+END_SRC

   Smart open line above
   #+BEGIN_SRC emacs-lisp
   
(defun quake/smart-open-line-above ()
  "Insert an empty line above the current line. Position the cursor at it's beginning, according to the current mode."
  (interactive)
  (move-beginning-of-line nil)
  (newline-and-indent)
  (forward-line -1)
  (indent-according-to-mode))

   #+END_SRC

   Join all the lines in the region.
   #+BEGIN_SRC emacs-lisp
   
(defun quake/join-region (beg end)
  "Join all the lines in the region."
  (interactive "r")
  (if mark-active
      (let ((beg (region-beginning))
            (end (copy-marker (region-end))))
        (goto-char beg)
        (while (< (point) end)
          (join-line 1)))))

   #+END_SRC

   New line and reindent

   #+BEGIN_SRC emacs-lisp

(defun quake/newline-at-end-of-line ()
  "Move to end of line, enter a newline, and reindent."
  (interactive)
  (move-end-of-line 1)
  (newline-and-indent))
   
   #+END_SRC

** Keybinds
   Save and quit
   #+BEGIN_SRC emacs-lisp

(global-set-key (kbd "s-q") 'save-buffers-kill-emacs) ;; quit   
(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "C-<return>") 'quake/newline-at-end-of-line)
(global-set-key [remap goto-line] 'goto-line-preview)

   #+END_SRC

** Hooks
   #+BEGIN_SRC emacs-lisp

(add-hook 'after-init-hook 'global-auto-revert-mode)
(add-hook 'after-init-hook 'transient-mark-mode)
(add-hook 'after-init-hook 'mode-line-bell-mode)
(add-hook 'after-init-hook 'beacon-mode)
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
   
   #+END_SRC
